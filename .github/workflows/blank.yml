name: Generated Screenshots - Website Responsive
on:
  push:
    branches:
      - main

jobs:
  quickcam-screenshots:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # Install dependencies (e.g., Puppeteer)
      - name: Install dependencies
        run: npm install puppeteer

      # Login to the website
      - name: Login to website
        run: |
          node -e "const puppeteer = require('puppeteer');

          (async () => {
            const browser = await puppeteer.launch();

            // Create an array of devices and browsers to capture screenshots
            const devices = [
              { name: 'Desktop Chrome', viewport: { width: 1920, height: 1080 }, userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' },
              { name: 'iPhone X', viewport: { width: 375, height: 812 }, userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1' }
              // Add more devices and browsers as needed
            ];

            // Loop through each device/browser combination
            for (const device of devices) {
              const page = await browser.newPage();

              // Set viewport size and user agent
              await page.setViewport(device.viewport);
              await page.setUserAgent(device.userAgent);

              // Navigate to the login page
              await page.goto('https://test-data-weaver.illuminz.io/login');

              // Enter username and password
              await page.waitForSelector('#email-input');
              await page.type('#email-input', 'admin@shyftlabs.io');
              await page.waitForSelector('#password-input');
              await page.type('#password-input', 'Admin@123');

              // Click on the login button
              await Promise.all([
                page.waitForNavigation(),
                page.click('#login-btn')
              ]);

              // Capture screenshot
              await page.screenshot({ path: 'heelo.png', fullPage: true });

              // Close the page
              await page.close();
            }

            // Close the browser
            await browser.close();
          })();"
        env:
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}

      # Upload screenshots as artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: ./

      # Cleanup
      - run: rm -rf ./*.png
